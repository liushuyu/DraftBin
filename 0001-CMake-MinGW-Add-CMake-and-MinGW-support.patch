From 14de8f33b8e4cbbbf880184f0c14292cfa94589b Mon Sep 17 00:00:00 2001
From: liushuyu <liushuyu011@gmail.com>
Date: Tue, 22 Mar 2016 21:15:50 +0800
Subject: [PATCH] [CMake+MinGW] Add CMake and MinGW support

---
 CQPdemo/CMakeLists.txt                   | 35 ++++++++++++++++++++++++++++++++
 CQPdemo/build.sh                         | 14 +++++++++++++
 CQPdemo/cqp.h                            |  7 +++----
 CQPdemo/targetver.h                      |  2 +-
 CQPdemo/toolchain-i686-w64-mingw32.cmake | 16 +++++++++++++++
 5 files changed, 69 insertions(+), 5 deletions(-)
 create mode 100644 CQPdemo/CMakeLists.txt
 create mode 100644 CQPdemo/build.sh
 create mode 100644 CQPdemo/toolchain-i686-w64-mingw32.cmake

diff --git a/CQPdemo/CMakeLists.txt b/CQPdemo/CMakeLists.txt
new file mode 100644
index 0000000..cfc9ce4
--- /dev/null
+++ b/CQPdemo/CMakeLists.txt
@@ -0,0 +1,35 @@
+cmake_minimum_required (VERSION 2.6)
+project (CQPdemo CXX)
+SET(PROJECT_VERSION_MAJOR 9)
+SET(PROJECT_VERSION_MINOR 2)
+SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake)
+message("Experimental port: unstable!")
+set(CQD_SRC
+        appmain.cpp  
+        dllmain.cpp  
+        stdafx.cpp
+    )
+set(HEADERS ${HEADERS}
+        appmain.h
+        cqp.h
+        stdafx.h
+        targetver.h
+    )
+
+include(CheckCSourceCompiles)
+if(NOT MSVC)
+    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Og")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
+else()
+    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Ox /GL")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
+endif()
+IF(NOT WIN32)
+    message("You will cross-compile on this device. BE CAREFUL!!")
+ENDIF() 
+message("Current Source Dir: ${CMAKE_CURRENT_BINARY_DIR}")
+add_custom_target(pre_lib COMMAND ${CMAKE_COMMAND} -E copy "${CMAKE_CURRENT_SOURCE_DIR}/CQP.lib" "${CMAKE_BINARY_DIR}/libCQP.a")
+link_directories(${CMAKE_SOURCE_DIR})
+add_library(cqd SHARED "${CQD_SRC}")
+link_libraries(cqd "CQP")
+add_dependencies(cqd pre_lib)
diff --git a/CQPdemo/build.sh b/CQPdemo/build.sh
new file mode 100644
index 0000000..82c92d1
--- /dev/null
+++ b/CQPdemo/build.sh
@@ -0,0 +1,14 @@
+#!/bin/bash
+echo "Configuring project..."
+if test -d "build" ; then
+   echo "Removing old files..."
+   rm -rf build
+fi
+mkdir build
+cd build
+cmake ../ -DCMAKE_TOOLCHAIN_FILE=../toolchain-i686-w64-mingw32.cmake
+if [ "$?" == "0" ]; then
+    make
+else
+    echo "Error!!"
+fi
diff --git a/CQPdemo/cqp.h b/CQPdemo/cqp.h
index 88c5a64..e90d54b 100644
--- a/CQPdemo/cqp.h
+++ b/CQPdemo/cqp.h
@@ -1,5 +1,5 @@
 /*
-* CoolQ SDK for VC++ 
+* CoolQ SDK for VC++
 * Api Version 9.6
 * Written by Coxxs & Thanks for the help of orzFly
 */
@@ -12,9 +12,8 @@
 #define CQAPI(ReturnType) extern "C" __declspec(dllimport) ReturnType __stdcall
 #endif
 
-#define CQEVENT(ReturnType, Name, Size) __pragma(comment(linker, "/EXPORT:" #Name "=_" #Name "@" #Size))\
- extern "C" __declspec(dllexport) ReturnType __stdcall Name
-
+#define CQEVENT(ReturnType, Name, Size)  extern "C" __declspec(dllexport) ReturnType __stdcall Name
+//__pragma(comment(linker, "/EXPORT:" #Name "=_" #Name "@" #Size))
 typedef int32_t CQBOOL;
 
 #define EVENT_IGNORE 0        //ÊÂ¼þ_ºöÂÔ
diff --git a/CQPdemo/targetver.h b/CQPdemo/targetver.h
index 87c0086..f6dc5bf 100644
--- a/CQPdemo/targetver.h
+++ b/CQPdemo/targetver.h
@@ -5,4 +5,4 @@
 // If you wish to build your application for a previous Windows platform, include WinSDKVer.h and
 // set the _WIN32_WINNT macro to the platform you wish to support before including SDKDDKVer.h.
 
-#include <SDKDDKVer.h>
+#include <sdkddkver.h>
diff --git a/CQPdemo/toolchain-i686-w64-mingw32.cmake b/CQPdemo/toolchain-i686-w64-mingw32.cmake
new file mode 100644
index 0000000..1788fd7
--- /dev/null
+++ b/CQPdemo/toolchain-i686-w64-mingw32.cmake
@@ -0,0 +1,16 @@
+# CMake toolchain configuration for Linux -> MinGW32 (Win32) cross compilation
+# This can be enabled by ./configure -DCMAKE_TOOLCHAIN_FILE=tools/toolchain-i686-w64-mingw32.cmake
+# The i686-w64-mingw32 toolchain is available at http://mingw-w64.sourceforge.net/
+# Taken from m13253/libWinTF8
+SET(CMAKE_SYSTEM_NAME Windows)
+SET(CMAKE_SYSTEM_PROCESSOR i686-w64-mingw32)
+SET(CMAKE_C_COMPILER ${CMAKE_SYSTEM_PROCESSOR}-gcc)
+SET(CMAKE_CXX_COMPILER ${CMAKE_SYSTEM_PROCESSOR}-g++)
+SET(CMAKE_RC_COMPILER ${CMAKE_SYSTEM_PROCESSOR}-windres)
+SET(CMAKE_AR ${CMAKE_SYSTEM_PROCESSOR}-gcc-ar CACHE FILEPATH "Archiver")
+SET(CMAKE_NM ${CMAKE_SYSTEM_PROCESSOR}-gcc-nm)
+SET(CMAKE_RANLIB ${CMAKE_SYSTEM_PROCESSOR}-gcc-ranlib)
+SET(CMAKE_STRIP ${CMAKE_SYSTEM_PROCESSOR}-strip)
+SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
+SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
+SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
-- 
2.7.4

